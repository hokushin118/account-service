# This is the base Docker Compose file containing infrastructure services.
# Project name
name: account-service

services:
  # PostgreSQL object-relational database system is used as Account data storage.
  postgres:
    image: postgres:${POSTGRES_VERSION}
    restart: on-failure
    networks:
      - ${BACKEND_NETWORK}
    healthcheck: # Healthcheck for better container management
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      replicas: 1
      # Resource limits for production
      resources:
        limits:
          cpus: '1' # Example: Limit to 1 CPU
          memory: '1G' # Example: Limit to 1GB memory
        reservations: # Guarantees resources are available
          cpus: '0.5'
          memory: '512M'

  # Prometheus (metrics database) - http://<host-ip>:19090
  # Example: http://localhost:19090/targets
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION}
    hostname: ${PROMETHEUS_HOSTNAME}
    restart: on-failure
    volumes: # prometheus configuration file
      - ./.infrastructure/metrics/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/data # creating a volume to save Prometheus data locally
    networks:
      - ${BACKEND_NETWORK}
    # Resource limits for production
    healthcheck:
      test: [ 'CMD-SHELL', 'wget --spider 
      http://${PROMETHEUS_HOSTNAME}:${PROMETHEUS_PORT}/-/healthy 
      || exit 1' ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      replicas: 1
      # Resource limits for production
      resources:
        limits:
          cpus: '1'  # Limit CPU usage
          memory: '1G' # Limit memory usage
        reservations: # Guarantees resources are available
          cpus: '0.5'
          memory: '512M'

volumes:
  prometheus_data:
    driver: local

# networks
networks:
  cba_net:
    name: ${BACKEND_NETWORK}
