# Project name
name: account-service

services:
  # PostgreSQL object-relational database system is used as Account data storage.
  postgres:
    image: bitnami/postgresql:${POSTGRES_VERSION}
    restart: on-failure
    ports: # Important: In a production environment you should remove the external port that kept here for debugging purposes.
      - 15432:5432 # external port / container port
    env_file:
      - .env.docker
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRESQL_INIT_FILE=/docker-entrypoint-initdb.d/init.sql  # Bitnami specific
    volumes:
      - ./.infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgresql_data:/bitnami/postgresql  # creating a volume to save PostgreSQL data locally
    networks:
      - ${BACKEND_NETWORK}
    healthcheck: # Healthcheck for better container management
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      replicas: 1
      # Resource limits for production
      resources:
        limits:
          cpus: '1' # Example: Limit to 1 CPU
          memory: '1G' # Example: Limit to 1GB memory
        reservations: # Guarantees resources are available
          cpus: '0.5'
          memory: '512M'

  # Prometheus (metrics database) - http://<host-ip>:19090
  # Example: http://localhost:19090/targets
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION}
    container_name: ${PROMETHEUS_CONTAINER_NAME}
    hostname: ${PROMETHEUS_HOSTNAME}
    restart: on-failure
    ports: # Important: In a production environment you should remove the external port that kept here for debugging purposes.
      - ${PROMETHEUS_PORT}:9090 # external port / container port
    env_file:
      - .env
    volumes: # prometheus configuration file
      - ./.infrastructure/metrics/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/data # creating a volume to save Prometheus data locally
    networks:
      - ${BACKEND_NETWORK}
    # Resource limits for production
    healthcheck:
      test: [ 'CMD-SHELL', 'wget --spider 
      http://${PROMETHEUS_HOSTNAME}:${PROMETHEUS_PORT}/-/healthy 
      || exit 1' ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      replicas: 1
      # Resource limits for production
      resources:
        limits:
          cpus: '1'  # Limit CPU usage
          memory: '1G' # Limit memory usage
        reservations: # Guarantees resources are available
          cpus: '0.5'
          memory: '512M'

  # The Account microservice provides REST API for the CB app.
  account-service:
    image: ${ACCOUNT_SRV_IMAGE}:${ACCOUNT_SRV_VERSION}
    container_name: ${ACCOUNT_SRV_CONTAINER_NAME}
    hostname: ${ACCOUNT_SRV_HOSTNAME}
    build:
      context: .
      dockerfile: ./Dockerfile
    restart: on-failure
    environment:
      - JVM_OPTS=-Xmx8g -Xms8g -XX:MaxPermSize=1024m
    labels:
      collect_logs_with_filebeat: true
      decode_log_event_to_json: true
    ports: # Important: In a production environment you should remove the external port that kept here for debugging purposes.
      - ${ACCOUNT_SRV_PORT}:5000 # external port / container port
    env_file:
      - .env.docker
    networks:
      - ${BACKEND_NETWORK}
    healthcheck: # # Healthcheck for better container management
      test: [ 'CMD-SHELL', 'curl -f http://${ACCOUNT_SRV_HOSTNAME}:${ACCOUNT_SRV_PORT}/health || exit 1' ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      replicas: 1
      # Resource limits for production
      resources:
        limits:
          cpus: '2' # Example: Limit to 2 CPUs
          memory: '2G' # Example: Limit to 2GB memory
        reservations: # Guarantees resources are available
          cpus: '1'
          memory: '1G'
    depends_on:
      - postgres
      - prometheus


volumes:
  postgresql_data:
    driver: local
  prometheus_data:
    driver: local

# networks
networks:
  cba_net:
    name: ${BACKEND_NETWORK}
